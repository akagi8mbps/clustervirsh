#!/bin/python
import sys
import libvirt
import subprocess as sp
import re
from xml.etree.ElementTree import *
import os.path


lstHypervisor = [
    "qemu+ssh://node1/system",
    "qemu+ssh://node2/system",
    "qemu+ssh://node3/system"
]

class ClusterVirt():
    def __init__(self):
        self.lstHV = []
        self.dicFunc = {
            "list":self.ShowGuests,
            "addvm":self.AddVM2PCS,
            "delvm":self.DelVM,
            "delimage":self.DelImage,
            "migrate":self.migrate,
            "console":self.console,
            "clone":self.clone,
            "rollback":self.rollback,
            "dis":self.dis,
            "ena":self.ena
        }

        for q in lstHypervisor:
            insLibvirt = None
	    try:
                insLibvirt = libvirt.open(q)
                libvirt.registerErrorHandler(f=self.libvirt_ignore, ctx=None)
            except Exception as e :
                #print "LIBVIRT OPEN ERROR(%s):%s" % (q,str(e))
                pass

            if(insLibvirt):
                self.lstHV.append(libvirt.open(q))

        # import pprint
        # pprint.pprint(dir(lstHV[0]))

    def libvirt_ignore(ignore, err):
        pass

    def ShowGuests(self,argv,argc):
        for hv in self.lstHV:
            print hv.getHostname() + "-"*60
            for id in hv.listDomainsID():
                dom = hv.lookupByID(id)
                infos = dom.info()
                print '  %d\t%s\t%d\t%d\t%d\t%d' % (id,dom.name(),infos[0],infos[1],infos[3],infos[2])

    def AddVM2PCS(self,argv,argc):
        strXMLfile = argv[2]
        if(not os.path.exists(strXMLfile)):
            print "Specified kvm xml file not exist(%s)" % strXMLfile
            return

        tree = parse(strXMLfile)
        ele = tree.getroot()
        strVMname = ele.find(".//name").text
        strRBDName = ele.find(".//source").get("name")

        #check rbd existing
        if(len(strRBDName) == 0):
            print "rbd not found "
            return

        strCmd = "/bin/rbd info %s" % strRBDName
        p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE, stderr=sp.PIPE)
        strOut,strErr = p2.communicate()
        if(strErr):
            print strErr
            return

        ######list style is not working .. multiple op xxx ignored by Popen->os.excvp->os.execvpe
        # strPCScmd = "pcs resource create vm-%s VirtualDomain hypervisor='qemu:///system' config='%s' migration_transport='ssh' meta allow-migrate='true' target-role='Started'" % (strVMname,strXMLfile)
        # lstPCScmd = re.split(" ",strPCScmd)
        # lstPCScmd.append("op start")
        # lstPCScmd.append("interval='0' timeout='120s' on-fail='restart'")
        # lstPCScmd.append("op monitor")
        # lstPCScmd.append("interval='10s' timeout='30s' on-fail='restart'")
        # lstPCScmd.append("op stop")
        # lstPCScmd.append("interval='0'")
        # lstPCScmd.append("timeout='90s'")
        # lstPCScmd.append("on-fail='fence'")
        # lstPCScmd.append("op migrate_to")
        # lstPCScmd.append("interval='0'")
        # lstPCScmd.append("timeout='300s'")
        # lstPCScmd.append("on-fail='fence'")
        # lstPCScmd.append("op migrate_from")
        # lstPCScmd.append("interval='0'")
        # lstPCScmd.append("timeout='240s'")
        # lstPCScmd.append("on-fail='restart'")

        strPCScmd = "pcs resource create vm-%s VirtualDomain hypervisor='qemu:///system' config='%s' migration_transport='ssh' meta allow-migrate='true' target-role='Started' op start interval='0' timeout='120s' on-fail='restart' op monitor interval='10s' timeout='30s' on-fail='restart' op stop interval='0' timeout='90s' on-fail='fence' op migrate_to interval='0' timeout='300s' on-fail='fence' op migrate_from interval='0' timeout='240s' on-fail='restart'" % (strVMname,strXMLfile)


        p2 = sp.Popen(strPCScmd,shell=True)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "pcs resource add error(%s)" % strErr
            return

        print "Added %s to Cluster" % strVMname
        strPCScmd = "pcs constraint order gluster-clone then vm-%s" % strVMname
        p2 = sp.Popen(strPCScmd,shell=True)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "pcs resource add error(%s)" % strErr
            return
        print "Added order for %s" % strVMname

        sp.Popen(["pcs","resource"])

    def DelVM(self,argv,argc):
        strVMname = argv[2]
        strPCScmd = 'pcs resource delete vm-%s' % strVMname
        p2 = sp.Popen(re.split(" ",strPCScmd))
        strOut,strErr = p2.communicate()
        if(strErr):
            print "pcs resource add error(%s)" % strErr
            return
        print strOut

    def DelImage(eslf,argv,argc):
        strImg = argv[2]
        #rbd info sl71-insideharmdev2 | grep parent
        strCmd = "rbd info %s" % (strImg)
        p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE, stderr=sp.PIPE)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "rbd info error(%s)" % strErr
            return
        if(strOut): print strOut;

        strParentSnap = None
        for l in strOut.split("\n"):
            #        parent: rbd/sl71-insideharmdev@sl71-insideharmdev-snap-20160510112814
            reRet = re.match("^[ \t]+parent: (.*$)",l)
            if(reRet):
                strParentSnap = reRet.group(1)
                print strParentSnap
                break

        strCmd = "rbd rm %s" % (strImg)
        p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE, stderr=sp.PIPE)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "rbd rm error(%s)" % strErr
            return
        print "rbd image removed(%s)" % strImg 
        if(strOut): print strOut;

        if(strParentSnap): # snap available
            print "This rbd image was created from %s" %strParentSnap
            strCmd = "rbd snap unprotect %s" % (strParentSnap)
            p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE, stderr=sp.PIPE)
            strOut,strErr = p2.communicate()
            if(strErr):
                print "rbd snap create error(%s)" % strErr
                return
            print "snap unprotected (%s)" %strParentSnap
            if(strOut): print strOut;
            strCmd = "rbd snap rm %s" % (strParentSnap)
            p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE, stderr=sp.PIPE)
            strOut,strErr = p2.communicate()
            if(strErr):
                print "rbd snap create error(%s)" % strErr
                return
            print "Snap removed (%s)" %strParentSnap
            if(strOut): print strOut;

    def GetVMHost(self,strVMname):
        for hv in self.lstHV:
            for id in hv.listDomainsID():
		try:
                    dom = hv.lookupByID(id)
                    infos = dom.info()
                    if(dom.name() == strVMname):
                        return hv,dom
		except:
                    print "here"
                    pass
        return None,None

    def GetHostByName(self,strHostname):
        for hv in self.lstHV:
            if(hv.getHostname() == strHostname):
                return hv
        return None

    def migrate(self,argv,argc):
        if(not argc == 4):
            print "invalid argment: migrate vmname migrateto"
            return
        strVMname = argv[2]
        strNewHost = argv[3]
        strPCScmd = 'pcs resource move %s %s' % (strVMname,strNewHost)
        p2 = sp.Popen(re.split(" ",strPCScmd))
        strOut,strErr = p2.communicate()
        if(strErr):
            print "pcs resource add error(%s)" % strErr
            return
        print strOut
        
    def console(self,argv,argc):
        if(not argc == 3):
            print "invalid argment: console vmname"
            return
        strVMname = argv[2]
        hv,dom = self.GetVMHost(strVMname)
        if(hv == None):
            print "No vm found"
            return
        print "virsh -c qemu+ssh://%s/system console %s" % (hv.getHostname(),strVMname)

    def rollback(self,argv,argc):
        if(not argc == 3):
            print "invalid argment: console vmname"
            return
        strVMname = argv[2]
        hv,dom = self.GetVMHost(strVMname)

        isLaunched = True
        if(hv == None):
            isLaunched=False
            print "No vm launched"
            
        #check vm status
        p1 = sp.Popen(["pcs","resource"],stdout=sp.PIPE, stderr=sp.PIPE)
        p2 = sp.Popen(["grep","vm-%s"%strVMname],stdin=p1.stdout,stdout=sp.PIPE)
        p1.stdout.close()
        strOut,strErr = p2.communicate()
        print strOut
        lstOut = re.split("\n",strOut)
        for l in lstOut:
            reRet1 = re.search("vm-%s +",l)
            if(reRet1):
                reRet2 = re.search(": Stopped ",l)
                if(reRet2):
                    isLaunched=False
                
        print "Launched: "+str(isLaunched)

        if(isLaunched):
            #disable vm
            strCmd = "pcs resource disable vm-%s" % strVMname
            print strCmd
            p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE)
            strOut,strErr = p2.communicate()
            if(strErr):
                print "(%s)" % strErr
                return
            print strOut
            #destroy vm
            strCmd = "virsh -c qemu+ssh://%s/system destroy %s" % (hv.getHostname(),strVMname)
            print strCmd
            p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE)
            strOut,strErr = p2.communicate()
            if(strErr):
                print "(%s)" % strErr
                return
            print strOut

        #show rollback item list
        strCmd = "rbd snap ls %s" % strVMname
        print strCmd
        p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "(%s)" % strErr
            return
        print strOut
        #input rollback
        print "Input snap name:"
        strSnapname = raw_input()
        #rollback
        strCmd = "rbd snap rollback %s@%s" % (strVMname,strSnapname)
        print strCmd
        p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "(%s)" % strErr
            return
        print strOut

        #disable vm
        strCmd = "pcs resource enable vm-%s" % strVMname
        print strCmd
        p2 = sp.Popen(re.split(" ",strCmd),stdout=sp.PIPE)
        strOut,strErr = p2.communicate()
        if(strErr):
            print "(%s)" % strErr
            return
        print strOut
        
    def clone(self,argv,argc):
        if(not argc == 4):
            print "invalid argment: clone xmlfilePath newvmname"
            return

        strXMLFile = argv[2]
        strNewName = argv[3]

        tree = parse(strXMLFile)
        ele = tree.getroot()
        # print ele.find(".//uuid").text
        # print ele.find(".//source").get("name")
        strOrgName = ele.find(".//name").text
        strRBDName = ele.find(".//source").get("name")

        import uuid
        ele.find(".//uuid").text = str(uuid.uuid1())
        ele.find(".//name").text = strNewName
        ele.find(".//source").set("name","rbd/"+strNewName)
        
        for i in  ele.findall(".//interface"):
            eleMac = i.find(".//mac")
            if(eleMac):
                i.remove(eleMac)
            # import pprint
            # pprint.pprint(dir(ele))

        strPath = re.sub("\/[^\/]*$","",strXMLFile)
        strNEWXML = strPath+"/"+strNewName+".xml"
        if(os.path.exists(strNEWXML)):
            print "Specified kvm xml file already exist(%s)" % strNEWXML
            return

        tree.write(strNEWXML)

            
        """
        rbd snap create rbd/sl71-harmdev@sl71-harmdev-snap
        rbd snap protect rbd/sl71-harmdev@sl71-harmdev-snap
        rbd clone rbd/sl71-harmdev@sl71-harmdev-snap rbd/sl71-harmdev2
        rbd snap unprotect rbd/sl71-harmdev@sl71-harmdev-snap
        """
        from datetime import datetime
        strDate = datetime.now().strftime("%Y%m%d%H%M%S")

        strCmd = "rbd snap create rbd/%s@%s-clone-%s" % (strOrgName,
                                                        strNewName,
                                                        strDate)
        p2 = sp.Popen(re.split(" ",strCmd))
        strOut,strErr = p2.communicate()
        if(strErr):
            print "rbd snap create error(%s)" % strErr
            return
        print strOut

        strCmd = "rbd snap protect %s@%s-clone-%s" % (strRBDName,
                                                     strNewName,
                                                     strDate)
        p2 = sp.Popen(re.split(" ",strCmd))
        strOut,strErr = p2.communicate()
        if(strErr):
            print "rbd snap protect error(%s)" % strErr
            return
        print strOut

        strCmd = "rbd clone %s@%s-clone-%s rbd/%s" % (strRBDName,
                                                         strNewName,
                                                         strDate,
                                                         strNewName)
        p2 = sp.Popen(re.split(" ",strCmd))
        strOut,strErr = p2.communicate()
        if(strErr):
            print "rbd clone error(%s)" % strErr
            return
        print strOut


    def ena(self,argv,argc):
        self.disena(argv,argc,"enable")

    def dis(self,argv,argc):
        self.disena(argv,argc,"disable")

    def disena(self,argv,argc,strOpr):
        strVMname = argv[2]
        strPCScmd = 'pcs resource %s vm-%s' % (strOpr,strVMname)
        p2 = sp.Popen(re.split(" ",strPCScmd))
        strOut,strErr = p2.communicate()
        if(strErr):
            print "pcs resource disable error(%s)" % strErr
            return
        print strOut
        
    def GuessFunc(self,strOpr):
        lstRet = []
        for k,v in self.dicFunc.items():
            if(re.match(strOpr,k)):
                lstRet.append({"str":k,"func":v})
        if(len(lstRet) == 1):
            return lstRet[0]["func"]
        elif(len(lstRet) == 0):
            return "No matching operation"
        else:
            lstKeys = []
            for k in lstRet:
                lstKeys.append(k["str"])
            return "Operation is ambiguous: "+",".join(lstKeys)

    def DispatchFunc(self):
        argv = sys.argv
        argc = len(argv)
        if(argc == 1):
            argv.append("list")

        strFunc = self.GuessFunc(argv[1])
        if(isinstance(strFunc,str)):
            print "%s" % strFunc
            sys.exit(0)
        else:
            strFunc(argv,argc)

if __name__ == "__main__":

    insCV = ClusterVirt()
    insCV.DispatchFunc()
